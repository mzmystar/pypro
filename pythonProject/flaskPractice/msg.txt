Flask
	基于Werkzeug WSGI 和Jinja2模板引擎
Flask的URL规则基于Werkzeug的路由模块，形成的url唯一
Flask构造函数使用当期模块的名称作为参数(__name__)
Flask类的route()函数是一个装饰器，告诉应用程序那个url应该调用相关的函数
	app.route(rule,options)
	rule参数表示与该函数的url绑定
	options为要转发给基础rule对象的参数列表
Flask变量规则:
	允许想规则参数添加变量部分，动态构建url
	app.route(rule<variable-name>)
	类型：默认为字符串
		eq:app.route('/hello/<int:id>')
	并作为关键字参数传递给与规则相关联的函数

Flask的run()方法在本地服务器上运行应用程序
	run(host,port,debug,options)
	host 设置为0.0.0.0 可使服务器在外部使用
	port 端口默认为5000
	debug 默认为false,为TRUE时作为调试模式
	options 要转发到底层的werkzeug服务器
redirect()函数 重定向函数
Flask的url_for()函数
	接收函数名称作为第一个参数，以及一个或多个关键字参数，每个参数对应URL的变量部分

Flask 的http方法
	get:以未加密的形式将数据发送到服务器；默认响应（可通过route()的methods参数更改）
	head：与get方法相同，但没有响应体
	post：将html 表单数据发送到服务器；post方法接收的数据不由服务器缓存
	put：用上传的内容替换目标资源的所有当前表示
	delete：删除由url给出的目标资源的所有当前表示
Flask 模板：
	模板是一个包含响应文本的文件，用变量表示动态部分，告诉引擎具体的值需要从使用的数据中获取
	使用真实值替换变量，并返回最终得到的字符串的过程称为渲染
	Flask框架使用Jinja2 模板引擎进行渲染模板的

	视图函数 作用：
		处理业务逻辑；
		返回响应内容；
	模板的好处：
		视图函数只负责业务逻辑和数据处理
		模板对取到的视图函数结果进行渲染展示
		代码结构清晰，耦合度低
	静态文件：
		多存于应用程序的/static文件夹下
		特殊端点 static 用于生成静态文件的url
Flask request 对象
	属性：
		form：字典对象，包含表单参数和键值对
		args：解析查询字符串的内容，为地址？之后的url的一部分
		cookies:保存cookie名称和键值对
		files:与上传文件有关的数据信息
		method：当前的请求方法
Flask cookies
	cookie 以文本的形式存储在客户端上；
	Flask处理cookie:
		设置cookie：set_cookie() max_age参数设置有效期，单位为秒
		获取cookie：request.cookie.get(cookie_name)
		删除cookie：delete_cookie(cookie_name)
Flask Session
    session 将数据存储在服务器上,且定义一个sercet_key用于加密数据；
    会话：客户端登录到服务器并注销服务器的时间间隔；
    session 对象是一个字典对象，包含会话变量和关联值得键值对；
    释放会话变量：session.pop(key)
Flask 重定向和错误：
    Flask.redirect(location,statuscode,response)
    location:重定向响应的url
    statuscode：发送到浏览器的标头，默认为302 (found)
    response:用于实例化响应
    Flask.abort(code) 指定错误界面；
Flask 消息闪现
    在一个请求结束的时候记录一个信息，并使得在且仅在下一次请求时访问，常与布局模板结合使用以公开信息；
    可通过next()函数呈现；
    flash(message,category)
        message:要闪现的实际消息
        category:[error,info,warning]
    删除消息：
    get_flashed_messages(with_categories,category_filter)
    第一个参数类型为元组
    第二个参数仅用于显示特定消息
    ep:flashTemp
Flask 文件上传:
    需将html表单中的enctype 属性设置为“multipart/form-data”；
    url处理程序通过request.files[]对象中获取文件信息；
    可在flask对象的配置设置中定义默认上传文件夹的路径和文件的最大大小
    app.config['UPLOAD_FOLDER']
    app.config['MAX_CONTENT_LENGTH']  以字节为单位
Flask 扩展：
    Flask 通常被称为微框架；
    核心功能：基于Werkzeug的WSGI和路由；
            基于Jinja2的模板引擎；
    Flask扩展为Flask框架提供了可扩展性
    扩展从app.config获取其自身的配置，并在初始化时传递给应用实例；
    Flask常用扩展包：
        Flask-SQLalchemy:操作数据库
        Flask-script:插入脚本
        Flask-migrate:迁移数据库
        Flask-Session:Session存储方式指定
        Flask-WTF:表单
        Flask-Mail:邮件
        Flask-Bable:提供国际化和本地化支持、翻译
        Flask-Login：认证用户状态
        Flask-OpenID:认证
        Flask-RESTful:开发REST API的工具
        Flask-Bootstrap:集成前端Twitter Bootstrap 框架
        Flask-Moment:本地化日期和时间
        Flask-Admin:简单可扩展的管理接口的框架
Flask-Mail:邮件
    安装：pip install Flask-Mail
    参数：
        MAIL_SERVER：电子邮件服务器的名称/IP地址
        MAIL_PORT：使用的服务端口号
        MAIL_USE_TLS:启用/禁用传输安全层加密
        MAIL_USE_SSL:启用/禁用安全套接字层加密
        MAIL_DEBUG:调试支持
        MAIL_USERNAME：发件人的用户名
        MAIL_PASSWORD:发件人的密码
        MAIL_DEFAULT_SENDER:设置默认发件人
        MAIL_MAX_EMAILS:设置要发送的最大邮件数量
        MAIL_SUPPRESS_SEND:如果app.testing设置为True，则发送被抑制
        MAIL_ASCII_ATTACHMENTS:
    Mail类：
        类构造函数：
            flask-mail.Mail(app=None) #将Flask应用对象最为参数
        方法：send()：发送Message类对象的内容
             connect()：打开与邮件主机的连接
             send_message()：发送消息对象
    Message类：
        类构造函数：
            flask-mail.Message()
            :param subject: email subject header
            :param recipients: list of email addresses
            :param body: plain text message
            :param html: HTML message
            :param sender: email sender address, or **MAIL_DEFAULT_SENDER** by default
            :param cc: CC list
            :param bcc: BCC list
            :param attachments: list of Attachment instances
            :param reply_to: reply-to address
            :param date: send date
            :param charset: message character set
            :param extra_headers: A dictionary of additional headers for the message
            :param mail_options: A list of ESMTP options to be used in MAIL FROM command
            :param rcpt_options:  A list of ESMTP options to be used in RCPT commands
        方法：
            attach() 添加附件
                参数：filename：
                     content_type:文件类型
                     data:原始文件数据
                     格式化：内容格式化操作
            add_recipient() 添加收件人
    Flask WTF
        安装：pip install flask-WTF
        用途：可在python脚本中定义表单字段，并使用HTML模板进行渲染；
            亦可将验证应用于WTF字段
        WTForms 表单字段定义：
            TextField
            BooleanField
            DecimalField
            IntegerField
            RadioField
            SelectField
            TextAreaField
            PasswordField
            SubmitField
        Validators 验证器类：
            DataRequired 检查输入字段是否为空
            Email   检查字段中的文本是否遵循电子邮件ID约定
            IPAddress 在输入字段验证IP地址
            Length 验证输入字段中的字符串长度是否在指定范围内
            NumberRange 验证数字是否在指定范围内
            URL 验证输入的URL
Flask-SQLalchemy:操作数据库
    ORM：对象关系映射 object relation mapping
    SQLalchemy:提供了SQL的全部功能和灵活性
    安装：pip install flask-sqlalchemy
    导入SQLAlchemy类：from flask_sqlalchemy import SQLAlchemy
    为要使用的数据库设置uri: 以sqlite举例
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.sqlite3'
    创建URI中的数据库： db.create_all()
    SQLAlchemy的Session对象管理ORM对象的所有持久性操作
        db.session.add(模型对象)  --将记录插入到映射表中
        db.session.delete(模型对象)  --将记录从映射表中删除
        model.query.all()   --从表中检索所有记录 model为表名
        可通过filter属性将过滤器应用于数据集：model.query.filter(column=condition).all()
Flask Sijax:
    Sijax:simple Ajax 是一个Python/jQuery库，目的是轻松的将Ajax 引入到应用程序中；
        其使用jQuery.ajax来发出AJAX请求
    安装：pip install flask-sijax
    组态：
        SIJAX_STATIC_PATH:要被镜像的Sijax JavaScript文件的静态路径；默认位置为:static/js/sijax;
            在该文件夹下存有：sijax.js和json2.js文件。
        SIJAX_JSON_URI:从中加载json2.js静态文件的uri;

        因sijax使用json在浏览器和服务器之间传递数据，无法通过使用post方法访问数据，且sijax使用post请求；
        为使view函数能够处理sijax请求，需使用
            @app.route('/url',methods=[\'GET\',\'POST\'])
        或  @flask_sijax.route() 辅助装饰器
        每个sijax处理函数都会自动接收至少一个参数，类似Python的'self'

Flask 部署：
        debug模式：常用于测试环境；于生产环境需禁用；
        如果禁用了debug，可以通过将主机名设置为host='0.0.0.0',使得本地计算机上的开发服务器可供网络上的用户使用；
        且此时当前的操作系统将侦听是所有公共IP；
    部署：从开发环境切换到成熟的生产环境，需要在真实的web服务器上部署应用程序；
        托管平台：为小型应用程序提供免费计划
            Heroku
            dotcloud
            webfaction
        专用服务器：
        mod_wsgi：Apache模块，提供了一个WSGI兼容接口，用于在Apache服务器上托管基于Python的web应用程序
        安装：pip install mod_wsgi
        验证是否安装成功：
            mod_wsgi-express start-server
            而后通过浏览器指向本地 http://localhost:8000 验证
        创建.wsgi文件：
            存在一个：yourapplication.wsgi文件，包含代码mod_wsgi,该代码在启动时执行以获取应用程序对象;
                eq: from yourapplication import app as application
            确保yourapplication和所有要使用的库都在Python加载路径上
        配置Apache: 告知mod_wsgi 应用程序的位置
        独立的WSGI容器：其包含WSGI应用程序并提供HTTP服务；
            Gunicorn
            Tornado
            Gevent
            Twisted Web
        静态文件处理:
            准备静态资源：
                在项目的根目录下（blog)创建static目录，存放静态资源
            配置nginx转发：
                eq: location /static{
                    # root html/blog;
                    alias html/blog/static;
                }
Flask FastCGI
        是在nginx、lighttpd和Cherokee等web服务器上的Flask应用程序的另一个部署选项；
    配置FastCGI：
        创建FastCGI 服务器文件 yourapplication.fcgiC
    配置Apache:
        对于基本的Apache部署，.fcgi文件将会出现在应用程序的url中;
            eq: example.com/yourapplication.fcgi/hello/
        为使其不出现在url中可采用以下方法:
            <VirtualHost *>
                ServerName example.com
                ScriptAlias / /path/to/yourapplication.fcgi/
            </VirtualHost>
    配置Lighttpd：
        详见：flaskPractice/FastCGITemp/yourapplication.fcgiC.py
        此配置将应用程序绑定到/yourapplication;
Flask 即插视图基本原则:
